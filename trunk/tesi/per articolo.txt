The mobility model

To achieve a good level of realism in a DTN simulation, a very important factor to consider is the behavior of nodes belonging the simulated world, especially their movement. To implement and simulate nodes movement capabilitier, in THE_ONE are included several mobility models which can be assigned to different nodes groups; each one define the algorithms and rules that generate the node movement paths. The available models are divided in three main categories: random waypoint models, map based models, human behavior based models. Simpliest models are Random Walk and Random Waypoint. While these models are very popular due to their simplicity they flaws in realism, so map based movement models are implemented, e.g. Random Map-Based Movement, Shortest Path Map-Based Movement, and Routed Map-Based Movement. These models constrain the node movement to paths defined in a real map data i.e. in Random Map-Based Movement the node moves randomly but only in streets defined in the map; Routed Map-Based Movement can be used to define a repetitive movement such as bus or train route.
Further realism is added by the Working Day Movement model that attempts to model typical human movement patters
during working days. In this model, that we used for our simulations, every node moves simulating a person involved in their daily activities according to the cycle, home-work-event-home. This cycle is composed by three main activities: sleep at home, work at the office, go out with friends in the evening. To switch between and move during various acrivities every node uses different mobility submodels, depending on the node capability of using the car or public transport. 
The daily repetition of these activities and the fact to do it in places common to other people, make possible the creation of communities e.g. people doing home activity in the same place are a family, people working in the same office are colleagues, etc..
In our simulations we used Working Day Movement model with the Helsinki map available in THE_ONE and a population of 1000 nodes which emulate people operating M2MShare. Nodes are uniformly distributed between the available districts in the map and the simulation time is set to one week, during which there are seven full cycles home-work-event-home. 


Evaluation of delegation efficiency

We compare the efficiency of our system, which employs delegations, against two other systems using different strategies: the first system is the one which don't use delegations and file exchange is initiated only when a peer holding the requested data is found directly by the file requester; the second one uses delegation but, instead of delegate a task only to peers which exceed the Frequency Threshold, this system delegate to all the met peers.
The metric we study is the average found time (Ftavg) for a specific multimedia file. The found time (Ft) is the time interval between the user request for and the retrieve of the file. In case of delegation is the the time an output return for that specific file is received.
To this purpose we implemented the two protocols in THE_ONE [14], a DTN simulation environment for delay tolerant networks. For sake of simplicity, delegations are one hop only, i.e., a servant peer cannot further delegate the task to other frequently encountered peers of its own. Also the software is always operational, there is only one active session configured that covers all day user activity.
The multimedia file the user is looking for has a size of 3.0 MB and it is, at the beginning of every simulation, in possess of 50 nodes randomly chosen between the popopulation and we repeat the simulation several times to achieve more accurate results.
In Fig. 1 it's possible to see the advantage, in terms of found time, using delegation instead of don't use it: systems using it retrieve the searched file in less time in every case, also considering the worst case scenario. The third system, which uses delegation to all peers met, get a better result on average, but at the cost of a higher number of task delegated, which implies more bandwidth used for search, retrieve and forward the file. In Fig. 2 it's possible to see how many delegations are used, by the two system using it, for retrieve the multimedia file searched. It's easy to see that M2MShare uses less delegations, but it is also true that in M2MShare an higher percents of delegated task is completed, (Fig. 3) i.e. more elected peers found the files and forward the result to the client node. This is due to the use delegation only with frequently encountered nodes, i.e. nodes which exceed Frequency Threshold value and have more possibilities to be met again and so forward the output of a delegated task before it expires. Indeed every delegated task has a TTL value and when that value has exceeded whitout the task result being forwarded, the task is considered expired and removed from servant peer. 
In Fig. 4 is compared bandwidth use of M2MShare and the system using delegation to all nodes. It's easy to see the higher use of bandwidth due to delegation without the use of Frequency Threshold compared whith the one achieved by M2MShare. For this result we considered data excanged between nodes elected as servants when downloading the requested file and forwarding the result to the client node.

The results are intuitive and conclusive; delegations extend
the requestor nodes search area, giving them the possibility to
reach the data file outside their environment.

The file population (Fp) parameter denotes the percentage
of nodes that posses the required file. The node requesting the
file is randomly chosen between the population and we repeat
the experiment 40 times in order to achieve more accurate
results, independent from the initial user starting point.
In the first scenario (Fig. 1) we consider Fp = 20%. The
protocol not employing delegations (purple line in the chart) is
not able to find any piece of the file during the simulation time
when the considered nodes in the scenario are equal or less
than 50. We have indicated this in the chart by assigning to
Ftavg a value of 24 h. This is due to the trivial strategy
employed by the protocol and to the sparse environment. Even
when able to find some node possessing the file (with N â‰¥ 100),
the time needed results bigger than when employing our
solution for task delegation (blue line in the chart). Clearly,
when increasing the file population (Fp), even the number of
nodes in the population that posses the data file increases; as a
result, the time to retrieve the file decreases for both solutions.
A similar result is achieved also when considering a wider
popularity for the required multimedia file (Fp = 50%, in
Fig. 2). However, in this case, the higher popularity of the
requested file helps both solutions in finding the file possessor
with a smaller Ftavg than in the previous scenario.
Finally, in Fig. 3, the performances of the two compared
solutions are very similar. This is due to the high file popularity
among nodes (Fp = 80%): the chances of eventually finding a
file possessor in a short time are clearly much higher.
The results are intuitive and conclusive; delegations extend
the requestor nodes search area, giving them the possibility to
reach the data file outside their environment.



